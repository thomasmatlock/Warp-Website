:root {
  --white: #ffffff;
  --light: #f0eff3;
  --black: #000000;
  --dark-blue: #1f2029;
  --dark-light: #353746;
  --red: #da2c4d;
  --yellow: #f8ab37;
  --grey: #ecedf3; }

:root {
  --white: #ffffff;
  --light: #f0eff3;
  --black: #000000;
  --dark-blue: #1f2029;
  --dark-light: #353746;
  --red: #da2c4d;
  --yellow: #f8ab37;
  --grey: #ecedf3; }

@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translate(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translate(0);
    /*putting zero basically places elements how it looks normally
    above we just offset the starting keyframes by translating it over */ } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0);
    /*putting zero basically places elements how it looks normally
    above we just offset the starting keyframes by translating it over */ } }

/* * is universal selector for everything on your page, it applies all block rules to everything inside it*/
*,
*::after,
*::before {
  /*we set this to border-box in body, so then here we ensure every el inherits that unless we specify otherwise*/ }

html {
  font-size: 62.5%;
  /* 1 rem = exactly 10px. Very useful for scaling everything else on page in rem*/
  /*important step2: users often set their own font size, so writing 10px as default font-size is bad practice, so we use percentages
  default font-size is 16px, so 100% would be 16px
  so we want 10px, default is 16, we divide 10 by the 16, and our percentage is 62.5%*/ }

body {
  box-sizing: border-box; }

body {
  /* everything related we specify in body, not in universal selector
    font props here, usually fonts just inherit everything, so we specify 
    -font family followed by option 1, comma, then option B if A is unavailable
    - lineheight 1.0 is just default line height anything else, ie 1.7 is 70% more than default*/
  font-family: 'Segoe UI', sans-serif;
  font-weight: 400;
  /*font-size: 1.6rem;*/
  line-height: 1.7;
  color: #777;
  padding: 3rem; }

h1 {
  color: white; }

a {
  text-decoration: none; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  font-family: 'Lato', sans-serif;
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    /*specify what animation this element uses*/
    animation-duration: 1s;
    /*specify animation duration*/
    animation-timing-function: ease-out;
    /*specify our how fast or slow our animation keyframes occur ie 0%, 80% etc
      ease-in means it starts slower and speeds up, ease-out means it starts fast, and slows at end
      ease-out is one of most essential, it slows down the end of all your anims*/
    /*
      animation-delay: 1s;
      animation-iteration-count: 2; /*specify how many times animation occurs*/ }
  .heading-primary--sub {
    /* display as block elements because block els occupy the entire width available, and create line breaks before/after them*/
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /*TIMESAVER - instead of inserting animation-name, animation-duration, animation-timing-function, etc,
        you can put them all together in a single line and it will figure it out by itself*/
    animation: moveInRight 1s ease-out; }

.heading-secondary {
  font-family: 'Lato', sans-serif;
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  -webkit-background-clip: text;
  color: transparent;
  letter-spacing: 2px;
  transition: all 0.1s; }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(20deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(0, 0, 0, 0.2); }

.heading-tertiary {
  font-family: 'Lato', sans-serif;
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem; }

.u-margin-bottom-medium {
  margin-bottom: 4rem; }

.u-margin-bottom-big {
  margin-bottom: 8rem; }

.btn {
  /*cool something is a link, add :link to it
    :link is a pseudo-class, which are special states of selectors
    we want to use this to style elements under special conditions, like hover or link or whatever
    here we want the normal and visited states to look styled the same*/
  /*so the :after pseudo element is pretty cool
      here we create the ghost element that appears on hover then retreats again, it appear to zoom into infinity
      it adds virtual element right after element we are selecting which we can style
      the trick is basically place it behind our element, when activated it appears, but then also disappears behind its original element
      we ALWAYS specify content property, even empty, or else it wont appear*/ }
  .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    /*removes underline of default anchor*/
    padding: 1.5rem 4rem;
    /*this creates button/element size around text, with 1 value, its for all 4 sides, but 2 values
        val1 is top/bottom, val2 is right/left
        we can also write 4 values, top right bottom left, but that kinda makes a weird asymetrical shape*/
    display: inline-block;
    /*inlineblocks are treated as text, so set textalign center in parent element, text-box*/
    color: #000;
    /*transition property always goes on initial state, not hover/active, thats just how it works*/
    transition: all ease-out 0.1s;
    /*you can specify which property(s) you want to animate with transition or just write 'all', and specify time*/
    position: relative;
    /*this is so the :after class can latch on this because absolute positions itself to nearest relative*/
    font-size: 1.6rem; }
  .btn:hover {
    transform: translateY(-0.3rem);
    /*causes element to appear to rise up*/
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2);
    /*box shadow takes a bunch of values, 
      value1 is x direction, left/right, 
      val2 is y, we want 1rem
      3rd value is blur
      val4 is color, we go complete black rgba with 20% opacity */
    /*this is a pseudo element for after, which happens on hover*/ }
    .btn:hover::after {
      transform: scaleX(1.4) scaleY(1.6);
      /*just like translate has x/y versions, so does scale*/
      opacity: 0;
      /*fadeout element*/ }
  .btn:active {
    /*heres what happens when it's active by user, aka a click lol*/
    transform: translateY(-0.1rem);
    /*this value is in relation to initial state, not hover state*/
    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2);
    /*cool effect, cut shadow length and shadow blur in half so element looks closer to page,
        further from user when clicked*/ }
  .btn--white {
    background-color: #fff;
    border-radius: 10rem; }
    .btn--white::after {
      background-color: #fff; }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    /*so it looks like its below oru button, so position it absolutely, and 0 from top/left to align it*/
    position: absolute;
    /*absolute position needs a reference, which is 1st element with relative position that it can find
        which means we go up to btn:link/visited and set position to reletive, so this hover can "latch" onto it*/
    top: 0;
    left: 0;
    z-index: -1;
    transition: all 0.4s; }
  .btn--animated {
    animation: moveInBottom 1s ease-out 1s;
    /*last value is delay, we want it to come in last*/
    animation-fill-mode: backwards;
    /*without this, the element initially appears, then after delay, disappears, then animates
      this prevents it from initially appearing and being ugly like dat
      --- it automatically applies the starting keyframe values before it even starts animating, like opacity etc*/ }

.btn-text:link, .btn-text:visited {
  color: #55c57a;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px;
  font-size: 1.6rem;
  transition: all 0.2s; }

.btn-text:hover {
  background-color: #55c57a;
  color: white;
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.15);
  transform: translateY(-2px); }

.btn-text:active {
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.25);
  transform: translateY(0px); }

.card {
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 52rem; }
  .card__side {
    height: 52rem;
    transition: all .8s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    backface-visibility: hidden;
    border-radius: 3px;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
    overflow: hidden; }
    .card__side--front {
      background-color: #fff; }
    .card__side--back {
      background-color: #55c57a;
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to bottom right, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to bottom right, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to bottom right, rgba(102, 177, 241, 0.8), #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0deg); }
  .card__picture {
    background-size: cover;
    height: 23rem;
    background-blend-mode: screen;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%); }
    .card__picture--1 {
      background-image: linear-gradient(to bottom right, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: url(../img/nat-5.jpg); }
    .card__picture--3 {
      background-image: url(../img/nat-5.jpg); }
  .card__heading {
    color: #fff;
    font-family: "Lato", sans-serif;
    font-size: 2.8rem;
    font-weight: 300;
    text-transform: uppercase;
    position: absolute;
    top: 12rem;
    right: 2rem;
    text-align: right;
    width: 75%; }
  .card__heading-span {
    padding: 1rem 1.5rem;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }

.composition {
  position: relative;
  /*
    translation for code below, what actually happens to scale down images not being hovered over
    composition:hover composition__photo:not(:hover) 

    you have to put composition:hover other it scales all the pictures back when you're not hovering, otherwise
    composition__photo:not(:hover) shrinks all the pics, and you need the first part because
    
    NOT SURE  quite how this works, mathwise. it seems that if you're hovering on composition, and not hovering on the photo, it shrinks. 
    
    it's like 
    an AND operator, if you hover on composition AND NOT the photo, it shrinks
    also, it doesn't activate when we hover over the .composition blank space, because technically there is no element there. the child elements constitute 
    .composition, so it only works if we hover ovver the constituent elements. k

    kind of like a body in a t-pose, technically you can fit a imaginary square around it, but touching blank air around body doesnt touch the body
    actually touching the physical space the t-posed body aka physical html elements occupy, then its considering touching/aka hovering
    */ }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.4);
    position: absolute;
    transition: all 0.2s, z-index 1ms;
    z-index: 10;
    outline-offset: 2rem; }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.4);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(255, 255, 255, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(0, 0, 0, 0.15);
  transition: transform 0.3s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: .5rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    -webkit-background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03);
    box-shadow: 0 2.5rem 4rem rgba(0, 0, 0, 0.4); }

.row {
  max-width: 114rem;
  background-color: transparent;
  margin: 0 auto;
  /*
    &:last-child {
        margin-bottom: 0px;
    }
    */ }
  .row:not(:last-child) {
    margin-bottom: 8rem; }
  .row::after {
    content: "";
    display: table;
    clear: both; }
  .row [class^="col-"] {
    float: left;
    background-color: transparent; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc(((100% - 2 * 6rem) / 3) * 2 + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc(((100% - 3 * 6rem) / 4) * 2 + (6rem)); }
  .row .col-3-of-4 {
    width: calc(((100% - 3 * 6rem) / 4) * 3 + (6rem * 2)); }

.header {
  /*
- vh is viewport height, 95vh is 95% of the viewport height
- jonas called the hero section the header
- basically he wants the hero to be at 95 so a small blank at bottom invites user to scroll down
    */
  height: 95vh;
  background-image: linear-gradient(to right, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  /* if you want another layer on top,, you just add it, putting top layer first*/
  background-size: cover;
  /* attempts to fit entire image into viewport without cropping or stretching*/
  background-position: top;
  /* makes top of image always stay at top of container. this may crop bottom of image
    - bottom keeps bottom in view, cropping top
    - center crops all sides as viewport h/w changes, keeping center in view at all times */
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /*start with from top left, top right, bottom right, bottom left coords, 
  THESE ARE WHAT YOU WANT VISIBLE
  https://bennettfeely.com/clippy/
    */
  position: relative; }
  .header__logo-box {
    position: absolute;
    /* this positions it absolutely within its parent element, i think parent element must be relative, 
  otherwise this positions itself according to the viewport instead of to its parent el*/
    top: 5rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem;
    /*I tried setting height on the logo-box div, but that doesnt work, you have to set img height, so give it a classname*/ }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    /*IMPORTANT
         if we leave top/left @ 50%, the 0,0 coords technically are positioned at 50%/50%, but the entire element is way to far over to right/bottom
        fix it with transform/translate!!
        translate takes our object and adjusts it over, in this case -50% for X, moving it left, -50% on y-axis, moving it up by 50% of its own size
        */
    /*(x, y)*/
    transform: translate(-50%, -50%);
    text-align: center; }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }

.section-features {
  padding: 20rem 0;
  background-image: linear-gradient(to right, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/nat-4.jpg");
  background-size: cover;
  margin-top: -20vh;
  transform: skewY(-7deg); }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 20rem 0 50rem 0;
  margin-top: -10rem; }

h1 {
  color: white; }

body {
  /*font-family: "Century Gothic", "Lato", sans-serif;*/
  font-family: 'Nunito', sans-serif;
  font-weight: 400;
  line-height: 1.6;
  color: #000000;
  margin: 0;
  height: 100%;
  overflow: hidden; }

a {
  text-decoration: none; }

.primary-nav-tabs,
.app-screen {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
  position: relative;
  background: white;
  text-align: center;
  padding: 0 2em; }
  .primary-nav-tabs h1,
  .app-screen h1 {
    font-size: 1rem;
    margin: 0;
    letter-spacing: 1rem; }
  .primary-nav-tabs h3,
  .app-screen h3 {
    font-size: 1rem;
    letter-spacing: 0.3rem;
    opacity: 0.6; }

.primary-nav-tabs-container {
  display: flex;
  flex-direction: row;
  position: absolute;
  bottom: 0;
  width: 60%;
  height: 3.5rem;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
  background: #fff;
  z-index: 10;
  position: fixed;
  top: 0;
  background-color: #fff; }

.primary-nav-tab {
  display: flex;
  justify-content: center;
  align-items: center;
  flex: 1;
  color: #000;
  letter-spacing: 0.1rem;
  transition: all 0.5s ease;
  font-size: 0.5rem; }

.primary-nav-tab:hover {
  color: white;
  background-position: right center;
  background: rgba(102, 177, 241, 0.8);
  transition: all 0.5s ease;
  transform: scale(1.05);
  /* border: rgba(0, 0, 0, 0);*/
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2); }

.primary-nav-tab-slider {
  position: absolute;
  bottom: 0;
  width: 50;
  height: 6px;
  background: #66b1f1;
  transition: left 0.3s ease; }

@media (min-width: 800px) {
  .primary-nav-tabs h1,
  .app-screen h1 {
    font-size: 1rem; }
  .primary-nav-tabs h3,
  .app-screen h3 {
    font-size: 1rem; }
  .primary-nav-tab {
    font-size: 1rem; } }

/* Style the tab */
.tab {
  overflow: hidden;
  /*border: 1px solid #ccc;
    //background-color: #f1f1f1;*/ }

/* Style the buttons that are used to open the tab content */
.tab button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 14px 16px;
  transition: 0.3s;
  text-transform: uppercase;
  flex: 1 1 auto;
  margin: 10px;
  padding: 30px;
  width: 23%;
  text-align: center;
  text-transform: uppercase;
  transition: 0.5s;
  background-size: 200% auto;
  color: white;
  /* text-shadow: 0px 0px 10px rgba(0,0,0,0.2);*/
  box-shadow: 0 0 20px #eee;
  border-radius: 10px; }

/* Change background color of buttons on hover */
.tab:hover {
  background-position: right center;
  transition: 0.6s; }

.btn-1 {
  background-image: linear-gradient(to right, #f6d365 0%, #fda085 51%, #f6d365 100%);
  width: 10vh;
  height: 10vh; }

.btn-2 {
  background-image: linear-gradient(to right, #fbc2eb 0%, #a6c1ee 51%, #fbc2eb 100%); }

.btn-3 {
  background-image: linear-gradient(to right, #84fab0 0%, #8fd3f4 51%, #84fab0 100%); }

.btn-4 {
  background-image: linear-gradient(to right, #a1c4fd 0%, #c2e9fb 51%, #a1c4fd 100%); }

.tablinks:hover {
  background-position: right center;
  transform: scale(1.05);
  /* change the direction of the change here */ }

/* Create an active/current tablink class */
.tab button.active {
  background-color: #ccc; }

/* Style the tab content */
.tabcontent {
  display: none;
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none; }

.header {
  background-image: linear-gradient(to left, #0463db 0%, #0b88e6 33%, #13aff2 66%, #19d2fc 100%);
  height: 11vh;
  width: 50%; }
